// <auto-generated />
using System;
using CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("SingleChargeRuleMinutes")
                        .HasColumnType("smallint");

                    b.Property<byte?>("TollFreeDays")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gothenburg",
                            SingleChargeRuleMinutes = (short)60,
                            TollFreeDays = (byte)65
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.ExemptCityVehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "CityId");

                    b.HasIndex("CityId");

                    b.HasIndex("VehicleId", "CityId")
                        .IsUnique();

                    b.ToTable("ExemptCityVehicles", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = 2,
                            CityId = 1
                        },
                        new
                        {
                            VehicleId = 3,
                            CityId = 1
                        },
                        new
                        {
                            VehicleId = 4,
                            CityId = 1
                        },
                        new
                        {
                            VehicleId = 5,
                            CityId = 1
                        },
                        new
                        {
                            VehicleId = 6,
                            CityId = 1
                        },
                        new
                        {
                            VehicleId = 7,
                            CityId = 1
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1
                        },
                        new
                        {
                            Id = 8,
                            CityId = 1
                        },
                        new
                        {
                            Id = 9,
                            CityId = 1
                        },
                        new
                        {
                            Id = 10,
                            CityId = 1
                        },
                        new
                        {
                            Id = 11,
                            CityId = 1
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.TollFreeDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TollFreeDates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Date = new DateOnly(2013, 1, 1)
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Date = new DateOnly(2013, 1, 5)
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Date = new DateOnly(2013, 1, 6)
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            Date = new DateOnly(2013, 3, 28)
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            Date = new DateOnly(2013, 3, 29)
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            Date = new DateOnly(2013, 3, 30)
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1,
                            Date = new DateOnly(2013, 3, 31)
                        },
                        new
                        {
                            Id = 8,
                            CityId = 1,
                            Date = new DateOnly(2013, 4, 1)
                        },
                        new
                        {
                            Id = 9,
                            CityId = 1,
                            Date = new DateOnly(2013, 4, 30)
                        },
                        new
                        {
                            Id = 10,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 1)
                        },
                        new
                        {
                            Id = 11,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 8)
                        },
                        new
                        {
                            Id = 12,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 9)
                        },
                        new
                        {
                            Id = 13,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 18)
                        },
                        new
                        {
                            Id = 14,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 19)
                        },
                        new
                        {
                            Id = 15,
                            CityId = 1,
                            Date = new DateOnly(2013, 5, 20)
                        },
                        new
                        {
                            Id = 16,
                            CityId = 1,
                            Date = new DateOnly(2013, 6, 21)
                        },
                        new
                        {
                            Id = 17,
                            CityId = 1,
                            Date = new DateOnly(2013, 6, 22)
                        },
                        new
                        {
                            Id = 18,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 19,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 20,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 21,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 22,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 23,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 24,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 1)
                        },
                        new
                        {
                            Id = 25,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 8)
                        },
                        new
                        {
                            Id = 26,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 9)
                        },
                        new
                        {
                            Id = 27,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 10)
                        },
                        new
                        {
                            Id = 28,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 11)
                        },
                        new
                        {
                            Id = 29,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 12)
                        },
                        new
                        {
                            Id = 30,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 13)
                        },
                        new
                        {
                            Id = 31,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 14)
                        },
                        new
                        {
                            Id = 32,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 15)
                        },
                        new
                        {
                            Id = 33,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 16)
                        },
                        new
                        {
                            Id = 34,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 17)
                        },
                        new
                        {
                            Id = 35,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 18)
                        },
                        new
                        {
                            Id = 36,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 19)
                        },
                        new
                        {
                            Id = 37,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 20)
                        },
                        new
                        {
                            Id = 38,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 21)
                        },
                        new
                        {
                            Id = 39,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 22)
                        },
                        new
                        {
                            Id = 40,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 23)
                        },
                        new
                        {
                            Id = 41,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 24)
                        },
                        new
                        {
                            Id = 42,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 25)
                        },
                        new
                        {
                            Id = 43,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 26)
                        },
                        new
                        {
                            Id = 44,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 27)
                        },
                        new
                        {
                            Id = 45,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 28)
                        },
                        new
                        {
                            Id = 46,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 29)
                        },
                        new
                        {
                            Id = 47,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 30)
                        },
                        new
                        {
                            Id = 48,
                            CityId = 1,
                            Date = new DateOnly(2013, 7, 31)
                        },
                        new
                        {
                            Id = 49,
                            CityId = 1,
                            Date = new DateOnly(2013, 10, 31)
                        },
                        new
                        {
                            Id = 50,
                            CityId = 1,
                            Date = new DateOnly(2013, 11, 1)
                        },
                        new
                        {
                            Id = 51,
                            CityId = 1,
                            Date = new DateOnly(2013, 12, 24)
                        },
                        new
                        {
                            Id = 52,
                            CityId = 1,
                            Date = new DateOnly(2013, 12, 25)
                        },
                        new
                        {
                            Id = 53,
                            CityId = 1,
                            Date = new DateOnly(2013, 12, 26)
                        },
                        new
                        {
                            Id = 54,
                            CityId = 1,
                            Date = new DateOnly(2013, 12, 30)
                        },
                        new
                        {
                            Id = 55,
                            CityId = 1,
                            Date = new DateOnly(2013, 12, 31)
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buss"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Diplomat"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Motorcycle"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Military"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Foreign"
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.City", b =>
                {
                    b.OwnsOne("CongestionTaxCalculator.Core.ValueObjects.Money", "MaxDailyCharge", b1 =>
                        {
                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(19,4)")
                                .HasColumnName("MaxDailyCharge_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("char(3)")
                                .HasColumnName("MaxDailyCharge_Currency");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("MaxDailyCharge");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.ExemptCityVehicle", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Entities.City", null)
                        .WithMany("ExemptCityVehicles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CongestionTaxCalculator.Core.Entities.Vehicle", null)
                        .WithMany("ExemptCityVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.TaxRule", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Entities.City", null)
                        .WithMany("TaxRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CongestionTaxCalculator.Core.ValueObjects.Money", "Charge", b1 =>
                        {
                            b1.Property<int>("TaxRuleId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(19,4)")
                                .HasColumnName("Charge_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("char(3)")
                                .HasColumnName("Charge_Currency");

                            b1.HasKey("TaxRuleId");

                            b1.ToTable("TaxRules");

                            b1.WithOwner()
                                .HasForeignKey("TaxRuleId");
                        });

                    b.OwnsOne("CongestionTaxCalculator.Core.ValueObjects.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<int>("TaxRuleId")
                                .HasColumnType("int");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time(0)")
                                .HasColumnName("TimeRange_End");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time(0)")
                                .HasColumnName("TimeRange_Start");

                            b1.HasKey("TaxRuleId");

                            b1.ToTable("TaxRules");

                            b1.WithOwner()
                                .HasForeignKey("TaxRuleId");
                        });

                    b.Navigation("Charge")
                        .IsRequired();

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.TollFreeDate", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Entities.City", null)
                        .WithMany("TollFreeDates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Infrastructure.EntityFrameworkCore.Context.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.City", b =>
                {
                    b.Navigation("ExemptCityVehicles");

                    b.Navigation("TaxRules");

                    b.Navigation("TollFreeDates");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("ExemptCityVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
